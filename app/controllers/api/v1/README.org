* Files
| Name                   | Description                            |
|------------------------+----------------------------------------|
| README.org             | this file                              |
| base_controller.rb     | base controller                        |
| sessions_controller.rb | log in                                 |
| users_controller.rb    | user create, show                      |
| virfiles_controller.rb | The file system that user could access |


* Description
** users_controller
*** tips
    - The token have to be changed after 3 times error
*** show
    - get the profile by token and user_name after verify.
    - POST   /api/v1/users/profile(.:format)
    - return {@user}.
      + attribute of @user /:name, :register_date/
    - 400 for error name
    - 403 for error token
    - e.g.
      + curl -i http://lys.webcam/api/v1/users/6
      + {"user":{"id":6,"name":"abcdefg","register_date":null,"root_id":null}}
        
*** create(register)
    - register a new user
    - POST   /api/v1/users(.:format)
    - receive {:name, :password}; 
    - feedback {@user, @state}
      * Meaning of state:
        + -1  |name| < 3
        + -2  |password| < 6
        + -3 user already exist.
        + 0 no error
      * attribute of @user: as same as those in show


    - e.g.
      + curl -i -X POST -d "user[name]=test-user-01@mail.com&user[password]=123123" http://lys.webcam/api/v1/users
      + {"state":0,"user":{"id":2,"name":"test-user-01@mail.com","register_date":"2015-07-11","root_id":2}}
    - e.g.
      + curl -i -X POST -d "user[name]=test-user-01@mail.com&user[password]=123123" http://lys.webcam/api/v1/users
      + {"state":-3}
** sessions_controller
   
*** create(login)
    - login and get user information
    - POST   /api/v1/sessions(.:format)
    - Receive {@user, :name, password}
    - feedback {login_suc, @user}
      + /login_suc = true/ if success.
      + /@user = nil/ when /login_suc == false/
      + attribute of @user :name, :register_date, :authen_token
    - 401 error if login fail
    - e.g.   
      + curl -i -X POST -d "user[name]=vincent6&user[password]=hlxdsbyb111" http://lys.webcam/api/v1/sessions {"login_suc":true,"user":{"id":11,"name":"vincent6","register_date":"2015-07-07","root_id":null}}
    - e.g.
      + curl -i -X POST -d "user[name]=vincent6&user[password]=hlxdsbyb1112" http://lys.webcam/api/v1/sessions
      + {"login_suc":false}
        

** virfiles_controller
   
*** index(list all the files in the directory)
  - list files and directory in :path of :user_name
  - GET    /api/v1/virfiles(.:format)
  - receive {abs_path}
    + attributes :user_name, :path
    + path == "" for root directory for every user
  - feedback {list}
    + list is an array, its element is virfiles(:id, :name, :if_file)
    + if_file == 1 means it's a file, a directory otherwise.
  - e.g.
    + curl -s "http://lys.webcam/api/v1/virfiles" -X GET -H 'Content-Type: application/json' --data '{"abs_path":{"user_name":"test-user-00@mail.com", "path":""}}' 
    + {"list":[{"id":2,"name":"first","if_file":1},{"id":3,"name":"first1","if_file":0}]} 
*** create
    - POST   /api/v1/virfiles(.:format) 
    - receive {abs_path, file_inf, frag_arr}
      + file_inf includes name & frag_num
      + abs_path includes user_name & path & if_file. We will create a new file or directory under "path" or "user_name"
        * if_file == 1 means it's a file, otherwise a directory
        * the root directory of any users is ""
      
    - e.g.
      + curl -s "http://lys.webcam/api/v1/virfiles" -X POST -H 'Content-Type: application/json' --data '{"abs_path":{"user_name":"test-user-00@mail.com", "path":""}, "file_inf":{"name":"first", "frag_num":2, "if_file":1}, "frag_arr" : [{"addr":"www/baidu/com", "index":1}, {"addr":"www.google.com", "index":2}]}' 
       
      + {"suc":true}
    - e.g.
      + curl -s "http://lys.webcam/api/v1/virfiles" -X POST -H 'Content-Type: application/json' --data '{"abs_path":{"user_name":"test-user-00@mail.com", "path":""}, "file_inf":{"name":"first1/", "frag_num":0, "if_file":0}, "frag_arr" : [{"addr":"www/baidu/com", "index":1}, {"addr":"www.google.com", "index":2}]}' 
      + {"suc":true}
*** show
    - show all the frag of :path
    - GET /api/v1/virfiles/:id(.:format) 
      + :id here remain for improvement.
    - receive {abs_path}
      + attributes  :user_name, :path
    - feedback {if_file, frag_num, frag_list}
      + if_file == 1 for file
      + frag_num is the number of frag.
      + frag_list is the list of {addr, index}
    - e.g.
      + curl -s "http://lys.webcam/api/v1/virfiles/2" -X GET -H 'Content-Type: application/json' --data '{"abs_path":{"user_name":"test-user-00@mail.com", "path":"first"}}' 
      + {"if_file":1,"frag_num":2,"frag_list":[{"addr":"www.google.com","index":2},{"addr":"www/baidu/com","index":1}]}
    - e.g.
      + curl -s "http://lys.webcam/api/v1/virfiles/2" -X GET -H 'Content-Type: application/json' --data '{"abs_path":{"user_name":"test-user-00@mail.com", "path":"first1/"}}' 
      + {"if_file":0,"frag_num":0,"frag_list":[]}

*** destroy
    - delete :path of :user_name
    - DELETE /api/v1/virfiles/:id(.:format)
      + :id for improvement in the future.
    - receive {abs_path}
      + attribute :user_name, :path
    - feedback {suc}
    - e.g.
      + curl -s "http://lys.webcam/api/v1/virfiles/2" -X DELETE -H 'Content-Type: application/json' --data '{"abs_path":{"user_name":"test-user-00@mail.com", "path":"first"}}' 
      + {"suc":true}
    - e.g.
      +  curl -s "http://lys.webcam/api/v1/virfiles/2" -X DELETE -H 'Content-Type: application/json' --data '{"abs_path":{"user_name":"test-user-00@mail.com", "path":"first1/"}}' 
      + {"suc":true}

* Security

** XSS(Cross-Site Scripting)
   - It's the most common hack way.
   - Fortunately, after rails 3, all the stuffs in View are "escape" by default.
** TODO CSRF(Cross-site request forgery)
   - All the reading or require operation only use GET method.
   - Security token for POST, DELETE and etc.
     + add "protect_from_forgery with: :exception" in app/controllers/application_controller.rb
** SQL injection
   - It's one of the most horribe attack.
   - We have to escape all the statement that passes parameters to function which controls SQL.
     + For /Where/ method in /ActiveRecord/ , never use string parameters. Because /Hash/ and /Array/ can deal with this hack automatically.
       * e.g. /Project.where( { :name => params[:name] } )/
     + No automatical escape for the method below:
       * find_by_sql
       * execute
       * where with string parameters
       * group
       * order
** Mass assignment
   - It's a specific security problem caused by the convenient of rails
   - We use /Strong Parameters/ to make sure that it's safe enough to /Mass assignment/ operation.

** Filter sensitive information
   - e.g. for password
     + /Rails.application.config.filter_parameters += [:password]/ in /config/initializers/filter_parameter_logging.rb/
     + Processing UsersController#create (for 127.0.0.1 at 2009-01-02 11:02:33) [POST]
   Parameters: {"user"=>{"name"=>"susan", "password_confirmation"=>"[FILTERED]", "password"=>"[FILTERED]"}, "commit"=>"Register", "action"=>"create", "authenticity_token"=>"9efc03bcc37191d8a6dc3676e2e7890ecdfda0b5", "controller"=>"users"}
