* Files
| Name                   | Description                            |
|------------------------+----------------------------------------|
| README.org             | this file                              |
| base_controller.rb     | base controller                        |
| sessions_controller.rb | log in                                 |
| users_controller.rb    | user create, show                      |
| virfiles_controller.rb | The file system that user could access |


* API description
** directory 
 | url                               | description                      | Methods |
 |-----------------------------------+----------------------------------+---------|
 | [[createUser][/api/v1/users(.:format)]]           | register a user                  | POST    |
 | [[userShow][/api/v1/users/profile(.:format)]]   | show user's profile              | POST    |
 | [[login][/api/v1/sessions(.:format)]]        | user login                       | POST    |
 | [[fileIndex][/api/v1/virfiles(.:format)]]        | create file or directory         | POST    |
 | [[listFile][/api/v1/virfiles/index(.:format)]]  | list all files in the directory  | POST    |
 | [[showFrag][/api/v1/virfiles/show(.:format)]]   | show all the  frags of this file | POST    |
 | [[deleteFile][/api/v1/virfiles/delete(.:format)]] | delete a file                    | DELETE  |
 | [[testHello][/api/v1/hello(.:format)]]           | test hello                       | GET     |
    
** tips
    - The token would  be changed after 3 times error
    - Please change all the "http://localhost:3000" into "http://222.195.92.170:3000" (It could be changed frequently)
    - The root directory for every user is nil string ("")
    - Every method to operate the virfile have to be verified at the very beggining. We have to receive {verify_info, :user_name, :authen_token}. 403 error for wrong authen_token
** users_controller
*** <<userShow>> show
**** description
    - show the profile after verify.
    - POST   /api/v1/users/profile(.:format)
    - 400 for error name & 403 for error token
**** request and response
    - request  {"show_user" : {"name" : <name>, "authen_token" : <token>}}
    - response {"user" : {"name" : "abc", "register_date" : "2000-01-01"}}
**** e.g.
    - error e.g.
      + curl -s "http://localhost:3000/api/v1/users/profile" -X POST -H 'Content-Type: application/json' -d '{"show_user":{"name":"test00", "authen_token":"token"}}' 
      + 403 error
    - successful e.g.
      + curl -s "http://localhost:3000/api/v1/users/profile" -X POST -H 'Content-Type: application/json' -d '{"show_user":{"name":"test00", "authen_token":"token"}}' 
      + {"user":{"name":"test00","register_date":"2015-07-20"}}
*** <<createUser>> create(register)
**** description
    - register a new user
    - POST   /api/v1/users(.:format)
    -  Meaning of state:
       + -1  |name| < 3
       + -2  |password| < 6
       + -3 user already exist.
       + 0 no error
**** request and response
    - requst {"register_user" : {"name" : <name>, "password" : <password>}; 
    - response {"state" : 0, "user" : {"name" : "abc", "register_date" : "2001-01-01", "authen_token" : "hellodks"}}
**** e.g.
    - short password e.g.
      + curl -s "http://localhost:3000/api/v1/users" -X POST -H 'Content-Type: application/json' -d '{"register_user":{"name":"test0", "password":"12"}}' 
      + {"state":-2}
    - short user name e.g.
      + curl -s "http://localhost:3000/api/v1/users" -X POST -H 'Content-Type: application/json' -d '{"register_user":{"name":"t", "password":"12345678"}}' 
      + {"state":-1}
    - successful e.g. 
      + curl -s "http://localhost:3000/api/v1/users" -X POST -H 'Content-Type: application/json' -d '{"register_user":{"name":"test00", "password":"12345678"}}' 
      + {"state":0,"user":{"name":"test00","register_date":"2015-07-20","authen_token":"135"}}    
    - duplicate name e.g.
      +  curl -s "http://localhost:3000/api/v1/users" -X POST -H 'Content-Type: application/json' -d '{"register_user":{"name":"test00", "password":"12345678"}}' 
      + {"state":-3}
** sessions_controller
   
*** <<login>> create(login)
**** description
    - login and get user information & token
    - POST   /api/v1/sessions(.:format)
    - /login_suc = true/ if success.
    - /user = nil/ when /login_suc == false/
    - 401 error if login fail
**** request and response
    - request {"user" : {"name" : <name>, "password", <psw>}}
    - response {"login_suc" : true, "user" : {"name" : "abc" , "register_date" : "2001-01-01", "authen_token" : "askgs"}}
**** e.g.
    - successful e.g.   
      + curl -s "http://localhost:3000/api/v1/sessions" -X POST -H 'Content-Type: application/json' -d '{"user":{"name":"test00", "password":"12345678"}}' 
      + {"login_suc":true,"user":{"name":"test00","register_date":"2015-07-20","authen_token":"abc=="}}
    - fail e.g.
      +  curl -s "http://localhost:3000/api/v1/sessions" -X POST -H 'Content-Type: application/json' -d '{"user":{"name":"test00", "password":"123456789"}}' 
      + 401 error
        
** virfiles_controller
   
*** <<fileIndex>> index(list all the files in the directory)
**** description 
  - list files and directory under "path" of "user_name"
  - POST   /api/v1/virfiles/index(.:format)
**** request and response
  - request {"abs_path" : {"user_name" : <name>, "path" : <path>, "authen_token" : <token>}}
  - response {"list" : [{"name" : "a", "if_file" : true}, {"name" : "b", "if_file" : false}]}
    + list is an array, its element is virfiles(:id, :name, :if_file)
    + /if_file == true/ means that it's a file, a directory otherwise.
**** e.g.
  - root directory
    + curl -s "http://localhost:3000/api/v1/virfiles/index" -X POST -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":""}, "authen_token":"h67w=="}' 
    + {"list":[{"name":"first","if_file":true},{"name":"firstd","if_file":true},{"name":"firstd1","if_file":false}]}

  - normal directory
    + curl -s "http://localhost:3000/api/v1/virfiles/index" -X POST -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":"firstd1/"}, "authen_token":"OmWA=="}' 
    + {"list":[{"name":"secondfile","if_file":true}]}
*** <<listFile>> create
**** description
    - POST   /api/v1/virfiles(.:format) 
    - create a new file or directory under "path" of "user_name"
    - the new file or directory would be "path/file_inf.name".
**** request and response

    - request {"abs_path" : {"user_name" : <name>, "path" : <path>}, "file_inf" : {"name" : <name>, "frag_num" : <num>, "if_file" : <if_file>, "file_sha1" : <sha1>, "file_md5" : <md5>, "frag_arr" : [array of frags]}, "authen_token" : "<token>"}
      + if_file == 1 means it's a file, otherwise a directory
    - response {"sec" : true}
**** e.g.
    - fail create
      + curl -s "http://localhost:3000/api/v1/virfiles" -X POST -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":""}, "file_inf":{"name":"ff2", "frag_num":2, "if_file": true, "file_sha1":"123", "file_md5":"123"}, "frag_arr" : [{"addr":"www/baidu/com", "index":1, "sha1":"123", "md5":"123", "server_name":"xinlang"}, {"addr":"www.google.com", "index":2, "sha1":"123", "md5":"123", "server_name":"xinlang"}], "authen_token" : "wrong"}' 
      + 403 error
    - create a file successful
      +   curl -s "http://localhost:3000/api/v1/virfiles" -X POST -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":""}, "file_inf":{"name":"ff2", "frag_num":2, "if_file": true, "file_sha1":"123", "file_md5":"123"}, "frag_arr" : [{"addr":"www/baidu/com", "index":1, "sha1":"123", "md5":"123", "server_name":"xinlang"}, {"addr":"www.google.com", "index":2, "sha1":"123", "md5":"123", "server_name":"xinlang"}], "authen_token" : "dag=="}' 
     
    - create a directory successful
      + curl -s "http://localhost:3000/api/v1/virfiles" -X POST -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":""}, "file_inf":{"name":"firstd1", "frag_num":0, "if_file":false}, "authen_token":"sdg=="}' 
      + {"suc":true}
*** <<showFrag>> show
**** description
    - show all the frag of "path"
    - POST   /api/v1/virfiles/show(.:format) 
**** request and response
    - request {"abs_path" : {"user_name" : <name>, "path" : <path>}, "authen_token" : <token>}
    - response for directory {"if_file" : false, "frag_num" : 0}
    - response for file {"if_file" : true, "frag_num" : 7, "file_sha1" : "123", "file_md5" : "456", "frag_list" : [{"addr" : "abc", "index" : 3, "sha1" : "2", "md5" : "6", "server_name" : "xinlang"}]}
      + /if_file == true/ for file
      + frag_num is the amount of frags.
**** e.g.
    - directory
      + curl -s "http://localhost:3000/api/v1/virfiles/show" -X POST -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":"firstd1"}, "authen_token":"1ZOmWA=="}' 
      + {"if_file":false,"frag_num":0}
    - file
      + curl -s "http://localhost:3000/api/v1/virfiles/show" -X POST -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":"first"}, "authen_token":"ZOmWA=="}' 
      + {"if_file":true,"frag_num":2,"file_sha1":"123","file_md5":"123","frag_list":[{"addr":"www.google.com","index":2,"sha1":"123","md5":"123","server_name":"xinlang"},{"addr":"www/baidu/com","index":1,"sha1":"123","md5":"123","server_name":"xinlang"}]}

*** <<deleteFile>> destroy
**** description
    - delete "path" of "user_name"
    - DELETE /api/v1/virfiles/delete(.:format) 
**** request and response
    - request {"abs_path" : {"user_name" : <name>, "path" : <path>}, "authen_token" : <token>}
    - response {"suc" : true}
**** e.g.
    - curl -s "http://localhost:3000/api/v1/virfiles/delete" -X DELETE -H 'Content-Type: application/json' -d '{"abs_path":{"user_name":"test00", "path":"firstd"}, "authen_token":"C1ZOmWA=="}'  
    - {"suc":true}

** <<testHello>> test hello
*** description
    only for test
*** request and response
    - get /api/v1/hello
    - response {"greet": "hello world"}
* Security

** XSS(Cross-Site Scripting)
   - It's the most common hack way.
   - Fortunately, after rails 3, all the stuffs in View are "escape" by default.
** CSRF(Cross-site request forgery)
   - All the reading or require operation only use GET method.
   - Security token for POST, DELETE and etc.
     + add "protect_from_forgery with: :exception" in /app/controllers/application_controller.rb 
** SQL injection
   - It's one of the most horribe attack.
   - We have to escape all the statement that passes parameters to function which controls SQL.
     + For /Where/ method in /ActiveRecord/ , never use string parameters. Because /Hash/ and /Array/ can deal with this hack automatically.
       * e.g. /Project.where( { :name => params[:name] } )/
     + No automatical escape for the method below:
       * find_by_sql
       * execute
       * where with string parameters
       * group
       * order
** Mass assignment
   - It's a specific security problem caused by the convenient of rails
   - We use /Strong Parameters/ to make sure that it's safe enough to /Mass assignment/ operation.

** Filter sensitive information
   - e.g. for password
     + /Rails.application.config.filter_parameters += [:password]/ in /config/initializers/filter_parameter_logging.rb/
     + Processing UsersController#create (for 127.0.0.1 at 2009-01-02 11:02:33) [POST]
   Parameters: {"user"=>{"name"=>"susan", "password_confirmation"=>"[FILTERED]", "password"=>"[FILTERED]"}, "commit"=>"Register", "action"=>"create", "authenticity_token"=>"9efc03bcc37191d8a6dc3676e2e7890ecdfda0b5", "controller"=>"users"}
